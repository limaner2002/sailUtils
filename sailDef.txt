lit := x | lit binOp lit
binOp := arOp | compOp
arOp := & | + | - | * | / | % | ^
compOp := < | > | <= | >= | <> | =
var := name | ns!name | var binOp var
ns := fn | cons | pv | ac | rf | rule | a | ri | local
arr := { seq }
seq := seq, seq | var | lit
func := name (seq) | ns!name (seq)
statement := var : lit | var | ( statement ) | statement1, statement2 | arr
dict := { dictSeq }
dictSeq := name : var | name : lit
